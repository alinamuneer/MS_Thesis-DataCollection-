import bmesh
import bpy
from bpy.props import BoolProperty
import numpy as np
import time
from mathutils import Euler


def transform_obj_to_frame(layer, ground):
    depsgraph = bpy.context.evaluated_depsgraph_get()
    object_eval = ground.evaluated_get(depsgraph)
    tmpMesh = bpy.data.meshes.new_from_object(object_eval)
    tmpMesh.transform(ground.matrix_world)
    tmp_ground = bpy.data.objects.new(name='tmpGround', object_data=tmpMesh)
    layer.active_layer_collection.collection.objects.link(tmp_ground)
    layer.update()
    return tmp_ground

context = bpy.context
scene = context.scene
cloth_object = bpy.data.objects['Cloth_2']
bpy.context.scene.frame_set(30)
layer = bpy.context.view_layer
tmp_obj = transform_obj_to_frame(layer, cloth_object)

grasp_mesh = tmp_obj.data
grasp_area_location_array = [tmp_obj.data.polygons[3187],tmp_obj.data.polygons[3162],tmp_obj.data.polygons[875],tmp_obj.data.polygons[850],tmp_obj.data.polygons[872],tmp_obj.data.polygons[849],tmp_obj.data.polygons[3184]]
sum=tmp_obj.data.polygons[3187].center
for polygon in grasp_area_location_array[1:]:
    sum=polygon.center+sum

OGP_vertex_location_vector=sum/len(grasp_area_location_array)
OGP_vertex_location_vector= np.array([OGP_vertex_location_vector[0],OGP_vertex_location_vector[1],OGP_vertex_location_vector[2]])
grasp_area_face_normal_array = [tmp_obj.data.polygons[3187],tmp_obj.data.polygons[3162],tmp_obj.data.polygons[875],tmp_obj.data.polygons[850],tmp_obj.data.polygons[872],tmp_obj.data.polygons[849],tmp_obj.data.polygons[3184],tmp_obj.data.polygons[3161],tmp_obj.data.polygons[2313],tmp_obj.data.polygons[5],tmp_obj.data.polygons[1],tmp_obj.data.polygons[2317],tmp_obj.data.polygons[4],tmp_obj.data.polygons[2],tmp_obj.data.polygons[2314],tmp_obj.data.polygons[2316]]
sum=tmp_obj.data.polygons[3187].normal
for polygon in grasp_area_face_normal_array[1:]:
    sum=polygon.normal+sum

OGP_face_normal_vector=sum/len(grasp_area_face_normal_array)
face_normal =  np.array([OGP_face_normal_vector[0],OGP_face_normal_vector[1], OGP_face_normal_vector[2]])
    
cloth_mesh_drop_direction=(grasp_mesh.vertices[583].co - grasp_mesh.vertices[578].co) + (grasp_mesh.vertices[1035].co - grasp_mesh.vertices[1034].co) / 2
cloth_mesh_drop_direction.normalize()
gripper_approach_direction = np.cross(face_normal, cloth_mesh_drop_direction)
third_vector = np.cross(face_normal, gripper_approach_direction)
OGP_transform_matrix_local= np.array([[third_vector[0],face_normal[0],gripper_approach_direction[0],OGP_vertex_location_vector[0]],
                                        [third_vector[1],face_normal[1],gripper_approach_direction[1],OGP_vertex_location_vector[1]],
                                        [third_vector[2],face_normal[2],gripper_approach_direction[2],OGP_vertex_location_vector[2]],                                  [0,0,0,1]])
print(OGP_transform_matrix_local)
bpy.data.objects['approach'].location[0]=gripper_approach_direction[0]*100
bpy.data.objects['approach'].location[1]=gripper_approach_direction[1]*100
bpy.data.objects['approach'].location[2]=gripper_approach_direction[2]*100
bpy.data.objects['face_Normal_gripper_normal'].location=OGP_face_normal_vector*100
bpy.data.objects['third_vector_gripper_binormal'].location[0]=third_vector[0]*100
bpy.data.objects['third_vector_gripper_binormal'].location[1]=third_vector[1]*100
bpy.data.objects['third_vector_gripper_binormal'].location[2]=third_vector[2]*100

bpy.data.objects.remove(bpy.data.objects['tmpGround'], do_unlink=True)

def rotate_and_render(output_dir, output_file_pattern_string = 'render%d.jpg', rotation_steps = 5, rotation_angle = 2.0, subject = bpy.data.objects["hanger_2"]):
  import os
  original_rotation = subject.rotation_euler
  for step in range(0, rotation_steps):
    subject.rotation_euler[0] = radians(step * (rotation_angle / rotation_steps))
    bpy.context.scene.render.filepath = os.path.join(output_dir, (output_file_pattern_string % step))
    bpy.ops.render.render(write_still = True)
    subject.rotation_euler[0] = radians(-step * (rotation_angle / rotation_steps))
    bpy.context.scene.render.filepath = os.path.join(output_dir, (output_file_pattern_string % (step*2)))
    bpy.ops.render.render(write_still = True)
    subject.rotation_euler[1] = radians(step * (rotation_angle / rotation_steps))
    bpy.context.scene.render.filepath = os.path.join(output_dir, (output_file_pattern_string % (step*3)))
    bpy.ops.render.render(write_still = True)
    subject.rotation_euler[1] = radians(-step * (rotation_angle / rotation_steps))
    bpy.context.scene.render.filepath = os.path.join(output_dir, (output_file_pattern_string % (step*4)))
    bpy.ops.render.render(write_still = True)
    subject.rotation_euler[2] = radians(step * (rotation_angle / rotation_steps))
    bpy.context.scene.render.filepath = os.path.join(output_dir, (output_file_pattern_string % (step*5)))
    bpy.ops.render.render(write_still = True)
    subject.rotation_euler[2] = radians(-step * (rotation_angle / rotation_steps))
    bpy.context.scene.render.filepath = os.path.join(output_dir, (output_file_pattern_string % (step*6)))
    bpy.ops.render.render(write_still = True)

rotate_and_render('', 'render%d.jpg')
bpy.data.objects["hanger_2"].rotation_euler=Euler((-0.0279, -0.0279, 6.0868))


